name: Container Image Pipeline

on:
  push:
    branches: [main]
    paths:
      - Containerfile
      - src/**
      - .github/workflows/container.yaml
      - .github/workflows/integration_test_reusable.yaml
  pull_request:
    branches: [main]
    paths:
      - Containerfile
      - src/**
      - .github/workflows/container.yaml
      - .github/workflows/integration_test_reusable.yaml

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

  fmt:
    name: Check formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Run clippy
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Run tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: kubernetes-sigs/kwok@main
        with:
          command: kwokctl
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Create cluster
        run: kwokctl create cluster --name test-cluster --wait 60s
      - name: Run tests
        run: cargo test --bins --verbose

  build-and-push:
    name: Build and Push Container
    needs: [fmt, clippy, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./Containerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  integration-test-reusable:
    needs: build-and-push
    with:
      image_tag: sha-${{ github.sha }}
    uses: ./.github/workflows/integration_test_reusable.yaml

  push-latest:
    name: Push Latest Tag
    needs: integration-test-reusable
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and retag image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  update-image-in-chart:
    needs: ["integration-test-reusable", "push-latest"]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      GH_TOKEN: ${{ secrets.PAT_ACTIONS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Open PR to update image in chart
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git fetch origin
          git switch -c image-tag-sha-${{ github.sha }}
          echo "image: sha-${{ github.sha }}" >> values.yaml
          git add values.yaml
          git commit -m "deps: update image tag to sha-${{ github.sha }}"
          git push origin image-tag-sha-${{ github.sha }}
          gh pr create --base main --head image-tag-sha-${{ github.sha }} --fill
          gh pr merge --auto --squash
