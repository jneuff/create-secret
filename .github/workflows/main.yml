name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

  fmt:
    name: Check formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Run clippy
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Run tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: kubernetes-sigs/kwok@main
        with:
          command: kwokctl
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Create cluster
        run: kwokctl create cluster --name test-cluster --wait 60s
      - name: Run tests
        run: cargo test --verbose

  build-and-push:
    name: Build and Push Container
    needs: [fmt, clippy, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./Containerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  integration-test:
    name: Integration Tests
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kind
        uses: helm/kind-action@v1.8.0
        with:
          node_image: kindest/node:v1.29.2

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.17.1

      - name: Wait for cluster to be ready
        run: |
          kubectl wait --for=condition=ready node --all --timeout=300s
          kubectl get nodes

      - name: Install Helm chart
        run: |
          helm upgrade --install create-secret ./helm/create-secret \
            --namespace test-create-secret \
            --create-namespace \
            --wait \
            --wait-for-jobs \
            --timeout 1m

      - name: Check if secret has been created
        run: |
          kubectl get secret -n test-create-secret secret1

      - name: Clean up
        if: always()
        run: |
          kind delete cluster
